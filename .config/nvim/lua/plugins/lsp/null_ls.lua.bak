local Util = require("lazyvim.util")

return {
  -- none-ls
  {
    -- enabled = false,
    "nvimtools/none-ls.nvim",
    -- event = "LazyFile",
    dependencies = { "mason.nvim" },
    init = function()
      Util.on_very_lazy(function()
        -- register the formatter with LazyVim
        require("lazyvim.util").format.register({
          name = "none-ls.nvim",
          priority = 200, -- set higher than conform, the builtin formatter
          primary = true,
          format = function(buf)
            return Util.lsp.format({
              bufnr = buf,
              filter = function(client)
                return client.name == "null-ls"
              end,
            })
          end,
          sources = function(buf)
            local ret = require("null-ls.sources").get_available(vim.bo[buf].filetype, "NULL_LS_FORMATTING") or {}
            return vim.tbl_map(function(source)
              return source.name
            end, ret)
          end,
        })
      end)
    end,
    opts = function(_, opts)
      local nls = require("null-ls")
      opts.root_dir = opts.root_dir
          or require("null-ls.utils").root_pattern(".null-ls-root", ".neoconf.json", "Makefile", ".git")
      opts.sources = vim.list_extend(opts.sources or {}, {
        nls.builtins.formatting.fish_indent,
        nls.builtins.diagnostics.fish,
        nls.builtins.formatting.stylua,
        nls.builtins.formatting.shfmt,
      })
    end,
  },

  -- none-ls.nvim
  -- {
  --   -- enabled = false,
  --   'nvimtools/none-ls.nvim',
  --   main = 'null-ls',
  --   dependencies = {
  --     -- mason-null-ls.nvim
  --     {
  --       'jay-babu/mason-null-ls.nvim',
  --       dependencies = 'williamboman/mason.nvim',
  --       cmd = { 'NullLsInstall', 'NullLsUninstall', 'NoneLsInstall', 'NoneLsUninstall' },
  --       opts = {
  --         ensure_installed = { 'stylua', 'markdownlint', 'mdformat', 'cpplint', 'clang_format', 'beautysh' },
  --         handlers = {},
  --       },
  --     },
  --     'nvim-lua/plenary.nvim',
  --   },
  --   event = { 'BufReadPre', 'BufNewFile' },
  --   opts = function()
  --     local nls = require('null-ls')
  --     -- local augroup = vim.api.nvim_create_augroup('LspFormatting', {})
  --     local skipped_filetypes = { 'markdown', 'rst', 'plaintext', 'toml', 'proto', 'java' }
  --     local skipped_servers = {
  --       'angularls',
  --       'ansiblels',
  --       'antlersls',
  --       'azure_pipelines_ls',
  --       'ccls',
  --       'omnisharp',
  --       'cssmodules_ls',
  --       'denols',
  --       'docker_compose_language_service',
  --       'ember',
  --       'emmet_ls',
  --       'eslint',
  --       'eslintls',
  --       'glint',
  --       'golangci_lint_ls',
  --       'gradle_ls',
  --       'graphql',
  --       'java_language_server',
  --       'jedi_language_server',
  --       'jdtls',
  --       'ltex',
  --       'neocmake',
  --       'ocamlls',
  --       'phpactor',
  --       'psalm',
  --       'pylsp',
  --       'pylyzer',
  --       'pyre',
  --       'quick_lint_js',
  --       'reason_ls',
  --       'rnix',
  --       'rome',
  --       'ruby_ls',
  --       'ruff_lsp',
  --       'scry',
  --       'solang',
  --       'solc',
  --       'solidity_ls',
  --       'sorbet',
  --       'sourcekit',
  --       'sourcery',
  --       'spectral',
  --       'sqlls',
  --       'sqls',
  --       'standardrb',
  --       'stylelint_lsp',
  --       'svlangserver',
  --       'tflint',
  --       'unocss',
  --       'verible',
  --       'vtsls',
  --       'vuels',
  --     }
  --     return {
  --       log_level = 'off',
  --       sources = {
  --         -- lua
  --         nls.builtins.formatting.stylua,
  --         -- nls.builtins.diagnostics.selene,
  --         -- markdown
  --         nls.builtins.formatting.mdformat,
  --         nls.builtins.formatting.markdownlint,
  --         nls.builtins.diagnostics.markdownlint,
  --         -- cpp
  --         -- nls.builtins.formatting.clang_format,
  --         -- nls.builtins.diagnostics.cpplint,
  --         -- shell
  --         nls.builtins.formatting.beautysh.with({ extra_args = { '-i', '2' } }),
  --         nls.builtins.diagnostics.zsh,
  --         -- toml
  --         nls.builtins.formatting.taplo,
  --         -- code actions
  --         nls.builtins.code_actions.gitrebase,
  --       },
  --       document_highlight = false,
  --       code_lens_refresh = true,
  --       on_attach_callback = nil,
  --       on_init_callback = nil,
  --       automatic_configuration = {
  --         ---@usage list of servers that the automatic installer will skip
  --         skipped_servers = skipped_servers,
  --         ---@usage list of filetypes that the automatic installer will skip
  --         skipped_filetypes = skipped_filetypes,
  --       },
  --       -- on_attach = function(client, bufnr)
  --       --   -- Autoformat on save if supported
  --       --   if client.supports_method('textDocument/formatting') then
  --       --     vim.api.nvim_clear_autocmds({
  --       --       group = augroup,
  --       --       buffer = bufnr,
  --       --     })
  --       --     vim.api.nvim_create_autocmd('BufWritePre', {
  --       --       group = augroup,
  --       --       buffer = bufnr,
  --       --       callback = function()
  --       --         vim.lsp.buf.format({
  --       --           async = false,
  --       --           bufnr = bufnr,
  --       --           -- Only use none-ls.nvim for formatting
  --       --           -- selene: allow(shadowing)
  --       --           ---@diagnostic disable-next-line: redefined-local
  --       --           filter = function(client)
  --       --             return client.name == 'null-ls'
  --       --           end,
  --       --         })
  --       --       end,
  --       --     })
  --       --   end
  --       -- end,
  --     }
  --   end,
  -- },
}
