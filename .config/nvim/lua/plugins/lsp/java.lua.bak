return {
  {
    "mfussenegger/nvim-jdtls",
    dependencies = {
      "folke/which-key.nvim",
      "LazyVim/LazyVim",
    },
    config = function()
      return {
        -- How to find the root dir for a given filename. The default comes from
        -- lspconfig which provides a function specifically for java projects.
        root_dir = require("lspconfig.server_configurations.jdtls").default_config.root_dir,

        -- How to find the project name for a given root dir.
        project_name = function(root_dir)
          return root_dir and vim.fs.basename(root_dir)
        end,

        -- Where are the config and workspace dirs for a project?
        jdtls_config_dir = function(project_name)
          return vim.fn.stdpath("cache") .. "/jdtls/" .. project_name .. "/config"
        end,
        jdtls_workspace_dir = function(project_name)
          return vim.fn.stdpath("cache") .. "/jdtls/" .. project_name .. "/workspace"
        end,

        -- How to run jdtls. This can be overridden to a full java command-line
        -- if the Python wrapper script doesn't suffice.
        cmd = { vim.fn.exepath("jdtls") },
        full_cmd = function(opts)
          local fname = vim.api.nvim_buf_get_name(0)
          local root_dir = opts.root_dir(fname)
          local project_name = opts.project_name(root_dir)
          local cmd = vim.deepcopy(opts.cmd)
          if project_name then
            vim.list_extend(cmd, {
              "-configuration",
              opts.jdtls_config_dir(project_name),
              "-data",
              opts.jdtls_workspace_dir(project_name),
            })
          end
          return cmd
        end,

        -- Setup keymap and dap after the lsp is fully attached.
        -- https://github.com/mfussenegger/nvim-jdtls#nvim-dap-configuration
        -- https://neovim.io/doc/user/lsp.html#LspAttach
        vim.api.nvim_create_autocmd("LspAttach", {
          callback = function(args)
            local client = vim.lsp.get_client_by_id(args.data.client_id)
            if client and client.name == "jdtls" then
              local wk = require("which-key")
              wk.register({
                ["<leader>Jx"] = { name = "+extract" },
                ["<leader>Jxv"] = { require("jdtls").extract_variable_all, "Extract Variable" },
                ["<leader>Jxc"] = { require("jdtls").extract_constant, "Extract Constant" },
                ["gs"] = { require("jdtls").super_implementation, "Goto Super" },
                ["gS"] = { require("jdtls.tests").goto_subjects, "Goto Subjects" },
                ["<leader>Jo"] = { require("jdtls").organize_imports, "Organize Imports" },
              }, { mode = "n", buffer = args.buf })
              wk.register({
                ["<leader>J"] = { name = "+code" },
                ["<leader>Jx"] = { name = "+extract" },
                ["<leader>Jxm"] = {
                  [[<ESC><CMD>lua require('jdtls').extract_method(true)<CR>]],
                  "Extract Method",
                },
                ["<leader>Jxv"] = {
                  [[<ESC><CMD>lua require('jdtls').extract_variable_all(true)<CR>]],
                  "Extract Variable",
                },
                ["<leader>Jxc"] = {
                  [[<ESC><CMD>lua require('jdtls').extract_constant(true)<CR>]],
                  "Extract Constant",
                },
              }, { mode = "v", buffer = args.buf })

              --     -- Java Test require Java debugger to work
              --     if opts.test and mason_registry.is_installed("java-test") then
              --     -- custom keymaps for Java test runner (not yet compatible with neotest)
              --     wk.register({
              --       ["<leader>t"] = { name = "+test" },
              --       ["<leader>tt"] = { require("jdtls.dap").test_class, "Run All Test" },
              --       ["<leader>tr"] = { require("jdtls.dap").test_nearest_method, "Run Nearest Test" },
              --       ["<leader>tT"] = { require("jdtls.dap").pick_test, "Run Test" },
              --     }, { mode = "n", buffer = args.buf })
              --   end
              -- end
              --
              -- -- User can set additional keymaps in opts.on_attach
              -- if opts.on_attach then
              --   opts.on_attach(args)
              -- end
              --
              -- These depend on nvim-dap, but can additionally be disabled by setting false here.
              -- dap = { hotcodereplace = "auto", config_overrides = {} },
              -- test = true,
            end
          end
        })
      }
    end
  }
}
